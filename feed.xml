<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kkangz Dev Blog</title>
    <description>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</description>
    <link>https://kkangz.github.io/</link>
    <atom:link href="https://kkangz.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Aug 2021 01:43:15 +0900</pubDate>
    <lastBuildDate>Sat, 14 Aug 2021 01:43:15 +0900</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>[Unity]] Unable to resolve reference UnityEditor.iOS.Extensions.Xcode</title>
        <description>&lt;p&gt;Unity 에서 Firebase Crashlytics를 추가하는데 이런 에러가 자꾸 난다. &lt;br /&gt;
Firebase Plugin에서 iOS 관련 DLL이 있어서 그런 것으로 보인다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Unable to resolve reference 'UnityEditor.iOS.Extensions.Xcode'. Is the assembly missing or incompatible with the current platform?
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Assembly 'Assets/ExternalDependencyManager/Editor/Google.IOSResolver_v1.2.166.dll' will not be loaded due to errors:
Unable to resolve reference 'UnityEditor.iOS.Extensions.Xcode'. Is the assembly missing or incompatible with the current platform?
Reference validation can be disabled in the Plugin Inspector.

Assembly 'Assets/Firebase/Editor/Firebase.Editor.dll' will not be loaded due to errors:
Unable to resolve reference 'UnityEditor.iOS.Extensions.Xcode'. Is the assembly missing or incompatible with the current platform?
Reference validation can be disabled in the Plugin Inspector.


Assembly 'Assets/Firebase/Editor/Firebase.Crashlytics.Editor.dll' will not be loaded due to errors:
Unable to resolve reference 'UnityEditor.iOS.Extensions.Xcode'. Is the assembly missing or incompatible with the current platform?
Reference validation can be disabled in the Plugin Inspector.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/88815970/129387102-aef4c1df-2048-4279-a8ef-8bc583228e54.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 문제는 간단히 Unity Hub에서 iOS 모듈을 추가해 주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/88815970/129387154-e617179f-dbfa-4df3-b24e-bf3b04c4059f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/88815970/129387130-49b1c3ac-bb69-4085-9c25-e072e26ce7d0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Aug 2021 20:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/unity-unityeditor_ios_extensions_error/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/unity-unityeditor_ios_extensions_error/</guid>
        
        <category>Unity</category>
        
        <category>UnityEditor.iOS.Extensions.Xcode</category>
        
        
        <category>Dev</category>
        
        <category>Unity</category>
        
      </item>
    
      <item>
        <title>Synology NAS에 인터넷 속도 측정하여 탤레그램으로 알리기</title>
        <description>&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;Synology NAS의 Docker 에 SpeedTest 이미지를 추가하여 최종적으로는 Telegram 봇을 통해
일별 인터넷 속도를 알려주는 걸 설정 해 봅니다.
얼마전에 유명 IT유튜버 &lt;a href=&quot;https://namu.wiki/w/KT%2010%EA%B8%B0%EA%B0%80%20%EC%9D%B8%ED%84%B0%EB%84%B7%20%EC%86%8D%EB%8F%84%20%EC%A0%80%ED%95%98%20%EC%82%AC%EA%B1%B4?from=KT%2010%EA%B8%B0%EA%B0%80%20%EC%9D%B8%ED%84%B0%EB%84%B7%20%EC%86%8D%EB%8F%84%20%EC%A0%80%ED%95%98%20%ED%8F%AD%EB%A1%9C%20%EC%82%AC%EA%B1%B4&quot; target=&quot;_blank&quot;&gt;잇섭님 KT 사건&lt;/a&gt;도 있고 하니 저도 매일 속도테스트를 해 보기로 했습니다.&lt;/p&gt;

&lt;h2 id=&quot;docker에-speedtest-설치&quot;&gt;Docker에 SpeedTest 설치&lt;/h2&gt;
&lt;p&gt;Syology NAS 콘솔 접속 후 Docker - 레지스트리로 들어가서 speedtest 를 검색합니다. &lt;br /&gt;
몇개가 뜨는데, 그 중 henrywhitaker3/speedtest-tracker 를 선택해서 다운받습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128807405-83c7cdb3-b1a5-4a5b-a878-e496ced35798.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;설정파일이-들어갈-경로-만들기&quot;&gt;설정파일이 들어갈 경로 만들기&lt;/h2&gt;
&lt;p&gt;다운하고있을때 SpeedTest 도커의 설정파일이 저장될 아무 폴더를 하나 만들어 줍니다. &lt;br /&gt;
저는 /docker/speedtest 로 만들었습니다.&lt;/p&gt;

&lt;h2 id=&quot;speedtest-컨테이너-실행&quot;&gt;SpeedTest 컨테이너 실행&lt;/h2&gt;
&lt;p&gt;Docker - 이미지로 가서, henrywhiteaker3/speedtest-tracker:latest 를 더블클릭해서 컨테이너를 생성해 줍니다.
먼저 고급설정으로 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128807883-07fc26fd-bcbd-408d-ac59-216116e51b4e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;볼륨 탭에서 아까 만든 폴더를 추가해 줍니다.
마운트 경로에는 /config 라고 적어주고 적용 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128807970-31162096-bd4e-4a74-8354-f40bf882dc96.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 환경 탭으로 가서, 
아래 내용을 넣습니다. 꼭 넣어야 합니다. OOKLA_EULA_GDPR은 무조건 true로 해야 동작을 하고, &lt;br /&gt;
TZ에 Asia/Seoul 을 넣어주어야 이후 텔레그램 알림 시 시간 설정이 정확히 동작 합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;변수 : OOKLA_EULA_GDPR
값 : true
변수 : TZ
값 : Asia/Seoul&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128831356-382180a0-fdbc-4eec-8036-2ec58ef88885.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음, 적용을 누르고 시작 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128808306-4766984f-1967-44cb-b896-42f041496022.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 뒤 Docker - 컨테이너- henrywhiteaker3/speedtest-tracker:latest 를 더블클릭 하여 WebServer 포트를 알아냅니다.
컨테이너 포트가 80인 로컬 포트를 찾으면 됩니다. (사진 상으로는 49157)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128808867-15b97cab-f2a9-490d-9d81-f37e345b822d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;server-설정-및-테스트&quot;&gt;Server 설정 및 테스트&lt;/h2&gt;

&lt;p&gt;인터넷 브라우저로 webserver:49157 로 접속 해 봅니다. &lt;br /&gt;
그리고 Settings 메뉴로 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128809798-c0086261-8af8-4be4-968c-72055b78d34f.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Server 항목을 보면, Server ID 를 넣어주는데요, &lt;br /&gt;
중간에 Server에 아래 값을 넣어 즙니다.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt; 6527
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128813946-22ebc1e7-972b-4911-942e-757221af4bfb.png&quot; alt=&quot;&quot; /&gt;&lt;/h2&gt;
&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;p&gt;이 서버 숫자는,아래 페이지에 나온 Korea 서버들 중 일부 입니다. &lt;br /&gt;
원하시는 서버가 있으면 해당 서버 번호를 추가하시면 됩니다. 하나씩 넣어서 테스트 잘 되는 서버 id를 여러개 넣어도 됩니다.(, 로 구분)
https://williamyaps.github.io/wlmjavascript/servercli.html
&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128810099-be633ddf-2ad1-434d-ab59-afa32df53ac1.png&quot; alt=&quot;&quot; /&gt;
—&lt;/p&gt;

&lt;p&gt;그리고 메인화면으로 가서 Start your first test! 를 누르고 기다리면 아래와 같이 결과를 볼수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128814113-d7bc4674-55af-4358-8f75-e673c30357fb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;텔레그램-알림-받기&quot;&gt;텔레그램 알림 받기&lt;/h1&gt;

&lt;p&gt;모바일 텔레그램 앱을 이용해서 봇 토큰을 받고 SpeedTest 서버에 추가하는 과정입니다.&lt;/p&gt;

&lt;h1 id=&quot;텔레그램-봇-토큰-받기&quot;&gt;텔레그램 봇 토큰 받기&lt;/h1&gt;

&lt;p&gt;모바일로 텔래그램 앱을 켠 뒤, 채팅창 목록에서 추가 - 사용자 명 BotFather 를 검색하고 추가 합니다. &lt;br /&gt;
그 뒤 /newbot 명령어로 새로운 봇을 생성 한 뒤, &lt;br /&gt;
이름을 설정 해 주고, Bot의 Username을 입력합니다. &lt;br /&gt;
Username은 unique하게 지어야 하기 때문에 다른 사람들이 미리 생성한 &lt;br /&gt;
이름은 넣을 수 없으며, 꼭 끝이 소문사 bot 으로 끝나야 합니다. &lt;br /&gt;
마지막으로 생성 후 나온 Token 을 복사해 놓고, 중간에 t.me/ 로 &lt;br /&gt;
시작하는 Telegram 방에 접속 해 놓습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128817318-1c5ad8b8-cc16-4d24-8b0a-0b84489a3e02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;텔레그램-chat-id-알아내기&quot;&gt;텔레그램 chat id 알아내기&lt;/h1&gt;

&lt;p&gt;채팅창 목록에서 추가 - 사용자 명 에 IDBot 을 입력 한 뒤 추가 합니다.
그리고 /getid 명령어를 이용해서 숫자로 된 id 를 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128817614-c5856626-f0bd-4b39-a8f8-445c539d4be7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;token-id-넣고-test&quot;&gt;Token, ID 넣고 Test&lt;/h3&gt;

&lt;p&gt;Settings 로 가서  Telegram bot token 에 위에서 얻은 Tokoen 을, &lt;br /&gt;
Telegram chat id 에 위에서 얻은 id를 입력 합니다. &lt;br /&gt;
그리고 Test nofitication 을 눌러보면! 아까 들어간 채팅방에서 알림을 받을 수 있습니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/88093966/129059184-71782044-d3dd-4db2-8033-0456ce5a6af9.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128817688-f36d67e7-ec7c-4a8c-af3d-c9418fcb7aa9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Spreadtest overview time - 알림을 받을 시간 입니다. UTC 기준으로 넣어야 되더라구요.
한국이 9 시간 빠릅니다. 그래서 16으로 넣으면 아침 7시에 들어 옵니다.
Threshold alert percentage - 기본적으로 평균보다 15% 속도가 낮으면 추가 알림을 받을 수 있습니다. &lt;br /&gt;
그 외 Download, Upload, Ping 들도 넣을 수 있으니 참고해 주세요 :)&lt;/p&gt;

&lt;p&gt;이렇게 설정하면 매일 아래와 같이 결과를 받아볼 수 있습니다. &lt;br /&gt;
그런데…그런데!! 결과가 이렇게 너무 천차만별 입니다. ㅠㅠㅠ &lt;br /&gt;
저는 1기가 인터넷 쓰는데…  &lt;br /&gt;
서버를 바꿔서 테스트를 좀 더 해봐야겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/88093966/129058630-6a414897-eb65-4d16-8743-7b886e0874f1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Aug 2021 20:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/synology_speedtest_docker/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/synology_speedtest_docker/</guid>
        
        <category>Synolgoy</category>
        
        <category>Xpenology</category>
        
        <category>NAS</category>
        
        <category>SppedTest</category>
        
        <category>Docker</category>
        
        <category>Telegram</category>
        
        
        <category>Dev</category>
        
        <category>NAS</category>
        
      </item>
    
      <item>
        <title>Ubuntu Samba 설정하여 MacOS에서 공유폴더 마운트 하기</title>
        <description>&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;
&lt;p&gt;Ubuntu에서 설정한 Samba Service를 이용하여 MacOS 에서 마운트 하는 방법 입니다. &lt;br /&gt;
먼저 Ubuntu 에서 Samba 설정을 해 줍니다.&lt;/p&gt;

&lt;h2 id=&quot;samba-설치&quot;&gt;Samba 설치&lt;/h2&gt;
&lt;p&gt;아래 명령어를 Ubuntu 에서 순차 입력하여 Samba를 설치 합니다.&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;sudo apt-get -y update
sudo apt-get -y intall samba
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또한 samba의 계정에 맞는 path 등을 설정 합니다. &lt;br /&gt;
저는 home directory를 samba로 공유하도록 하겠습니다. &lt;br /&gt;
먼저 아래 명령어로 samba 설정파일을 수정 합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;sudo vi /etc/samba/smb.conf
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이후 맨 아래쪽에 아래 라인을들을 추가 합니다.
계정명이 kkangz 인 경우 입니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[kkangz]
    comment = kkangz HOME
    path = /home/kkangz
    public = no
    writable = yes
    browseable = yes
    valid users = kkangz
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 아래 명령어로 Samba Password 설정 및 유저 추가를 합니다.설정합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;smbpasswd &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; kkangz
&lt;span class=&quot;go&quot;&gt;New SMB password:
Retype new SMB password:
Added user kkangz.
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;저장 후 아래 명령어로 Samba를 재시작 합니다!&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;sudo service smbd restart
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;macos에서-네트워크-연결-설정&quot;&gt;MacOS에서 네트워크 연결 설정&lt;/h2&gt;

&lt;p&gt;이제 MacOS 로 옵니다. &lt;br /&gt;
MacOS에서는 바탕화면에서 Command+K 를 누르거나, &lt;br /&gt;
Finder - 이동 - 서버에 연결 메뉴 클릭해서 &lt;br /&gt;
아래 “서버에 연결” 메뉴로 진입 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128672909-4a9bbdfd-162d-4e24-a601-00a8292d6094.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;주소에는 smb://&amp;lt;UBUNTU PC의 IP주소&amp;gt; 를 넣어 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128672942-0c4a06cb-75c9-4a53-8b8b-3aa6a375dc26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이름, 암호에는 Samba에 설정한 name과 password를 넣어 주고 볼륨을 선택하면 정상적으로 연결 됩니다!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128672965-68d1542b-2d15-4ef9-b786-e64a3c67d5f1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128673017-61c793b3-d83c-4f2e-9666-a2041839c7e6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128673209-87e3b1dc-091b-4847-832b-1511e3de8a95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/128673243-097bcb37-e16f-4ef2-acf5-eede10114320.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;그-외-samba-명령어들&quot;&gt;그 외 Samba 명령어들&lt;/h2&gt;

&lt;h3 id=&quot;samba에-등록된-유저-확인&quot;&gt;Samba에 등록된 유저 확인&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;sudo pdbedit -L
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;samba에-등록된-유저-확인자세히-보기&quot;&gt;Samba에 등록된 유저 확인(자세히 보기)&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;sudo pdbedit -L -v
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;samba에-등록된-유저-삭제&quot;&gt;Samba에 등록된 유저 삭제&lt;/h3&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;go&quot;&gt;sudo smbpasswd -x username
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Aug 2021 20:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/access_ubuntu_samba_from_mac_os/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/access_ubuntu_samba_from_mac_os/</guid>
        
        <category>Samba</category>
        
        <category>Ubuntu</category>
        
        <category>MacOS</category>
        
        
        <category>Dev</category>
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>[AWS] Amplify의 SSL인증서를 이용한 DNSZi CNAME 연결방법(https 적용)</title>
        <description>&lt;h3 id=&quot;개요&quot;&gt;개요&lt;/h3&gt;
&lt;p&gt;AWS Amplify 를 사용하여 간단한 Web Application 을 만든 이후,&lt;/p&gt;

&lt;p&gt;AWS Certificate Manager 를 통해 SSL, HTTPS 설정하는 방법 입니다.&lt;/p&gt;

&lt;p&gt;제가 가지고 있는 domain 은 네임서버(dns)를 &lt;a href=&quot;https://dnszi.com&quot;&gt;DNSZi.com&lt;/a&gt; 에서 관리하고 있기 때문에, &lt;br /&gt;
이를 바탕으로 설명하겠습니다.&lt;/p&gt;

&lt;p&gt;또한 저는 제 Amplify 웹을 제가 소유한 도메인의 서브도메인 react.mydomain.com 으로 구성 하려고 합니다.&lt;/p&gt;

&lt;p&gt;먼저 Amplify 를 이용해 간단한 웹 앱을 만들면,&lt;/p&gt;

&lt;p&gt;아래와 같이 초기 설정 단계에서 “Add a custom domain with a free SSL certificate” 이 나옵니다.&lt;/p&gt;

&lt;p&gt;저는 설정을 해 놨기 때문에 체크 되어있지만, 처음엔 진행해야 하는 항목으로 출력이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127426108-e5e6e594-986e-427c-9875-af740e153345.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 Amplify 설정 Console 에서 Domain 을 추가해 줍니다. Domain Management - Create&lt;/p&gt;

&lt;p&gt;도메인 주소에는 mydomain.com 과같이 root domain 을 입력해 주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127426584-33cf54c9-ba6f-41bf-a69f-c043e680c714.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 Manage subdomain 메뉴로 들어가서 아래와같이 사용할 subdomain 설정을 해줍니다.&lt;/p&gt;

&lt;p&gt;저의 경우에는 react 로 입력했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127426898-7126c490-1acc-4b42-8fa6-48dc8218d6d9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후에 SSL configuration 설정을 확인해 보면 아래와 같이 뜨는데요,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127427175-20467132-4fe0-4626-ab81-2356d89180d9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DNSzi - CNAME 관리에서 아래와 같이 추가해 줍니다. &lt;br /&gt;
윗 사진이랑 값 비교해보세요. 좌측이 왼쪽 CNAME 값, 우측이 목적지 도메인 입니다.(마지막에 . 은 지우세요)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127429828-e567f1be-ba38-450f-9de5-e8d36c452735.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;몇시간 뒤에 다시 Amplify Console 확인해 보면 xxxxxxxxxxx.cloudfront.net URL 이 생겨있습니다. 아래와 같이요.&lt;/p&gt;

&lt;p&gt;본인의 subdomain 주소와 Cloudfront.net 주소를 마찬가지로 DNSzi 에 추가해 줍니다. 아래 2번 항목처럼요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127430007-ad45ed53-2d92-4313-b8c1-b01c46a52ee6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설정이 완료되었습니다! 조금 기다려보시면 SSL Configuration pass 되고 &lt;br /&gt;
Domain 설정에 Available 로 변경되는걸 확인하실 수 있을 겁니다.&lt;/p&gt;

&lt;p&gt;웹페이지 로딩 화면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/127430247-4853e317-1d7d-4a75-9326-78bbfd2846ba.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Jul 2021 20:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/aws_ssl_dnszi/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/aws_ssl_dnszi/</guid>
        
        <category>AWS</category>
        
        <category>Amplify</category>
        
        <category>AWS Certificate Manager</category>
        
        <category>SSL</category>
        
        <category>HTTPS</category>
        
        
        <category>Dev</category>
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>[HomeAssistant] 하트IR ESPHOME 펌웨어로 변경, HA연동하기 (2)</title>
        <description>&lt;p&gt;본 포스팅에서는 하트IR을 통해 에어컨을 제어하기 위해 앞 포스팅에서&lt;/p&gt;

&lt;p&gt;생성한 ESPHome 바이너리를 하트IR에 올리기 까지 내용을 기술 합니다.&lt;/p&gt;

&lt;p&gt;본 포스팅은 시리즈로 게시됩니다.&lt;/p&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Home Assistant 내 ESPHOME 에서 Firmware Image (Bin) 만들기&lt;/li&gt;
  &lt;li&gt;라즈베리파이를 이용해서 업데이트 서버로 위장, 하트IR 펌웨어 변경하기 (본 페이지)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;tuya-convert-이용해서-펌웨어-변경하트ir-펌웨어---tasmota&quot;&gt;tuya-convert 이용해서 펌웨어 변경(하트IR 펌웨어 -&amp;gt; tasmota)&lt;/h3&gt;

&lt;p&gt;대략적인 순서는 하트IR의 펌웨어를 tuya-convert 이용해서 Tasmota Firmware로 올리고,&lt;/p&gt;

&lt;p&gt;Tamota Firmware에서 다시 ESPHome Firmware(앞 포스팅에서 만든) 로 올리는게 순서 입니다.&lt;/p&gt;

&lt;p&gt;라즈베리파이나 WiFi가 가능한 리눅스 컴퓨터의 터미널을 실행 후, 
아래와 같이 차례로 입력 합니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su - root
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;tuya_convert
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tuya_convert
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git clone https://github.com/ct-Open-Source/tuya-convert &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./install_prereq.sh
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./start_flash.sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;전체적인 과정은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;pi@raspberrypi:~ $&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;su - root
&lt;span class=&quot;gp&quot;&gt;root@raspberrypi:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;tuya_convert
&lt;span class=&quot;gp&quot;&gt;root@raspberrypi:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tuya_convert/
&lt;span class=&quot;gp&quot;&gt;root@raspberrypi:~/tuya_convert#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git clone https://github.com/ct-Open-Source/tuya-convert &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Cloning into '.'...
remote: Enumerating objects: 1387, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 1387 (delta 0), reused 0 (delta 0), pack-reused 1386
Receiving objects: 100% (1387/1387), 3.88 MiB | 2.05 MiB/s, done.
Resolving deltas: 100% (857/857), done.
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;root@raspberrypi:~/tuya_convert#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;./install_prereq.sh
&lt;span class=&quot;go&quot;&gt;Hit:1 http://archive.raspberrypi.org/debian buster InRelease
Get:2 http://raspbian.raspberrypi.org/raspbian buster InRelease [15.0 kB]
Get:3 http://raspbian.raspberrypi.org/raspbian buster/main armhf Packages [13.0 MB]
Fetched 13.0 MB in 12s (1,098 kB/s)
Reading package lists... Done
Reading package lists... Done
Building dependency tree
Reading state information... Done
..생략..
Ready to start upgrade
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기까지 하고, ./start_flash.sh 를 수행하면 각종 경고문구 무시하시고.. &lt;br /&gt;
(하트IR의 펌웨어를 변경하기 때문에 조심하라는..경고 입니다.ㅠㅠ 임의로 장비의 펌웨어를 변경하는 행위이니 당연히 위험은 소비자의 몫.)&lt;/p&gt;

&lt;p&gt;yes 입력 후 엔터.&lt;/p&gt;

&lt;p&gt;주의사항 : 컴퓨터에서 ssh로 라즈베리파이나 리눅스로 접속하면안됩니다.ㅠ &lt;br /&gt;
 이 과정을 거치면 라즈베리파이의 wifi연결을 끊고 Wifi AP 를 새로 만들기 때문에 연결이 끊깁니다..^^;;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126811947-09c74f99-851b-4447-af95-6f771cc553d3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 나오면 ENTER 누르지 말고 기다리세요.
&lt;br /&gt;
내용 읽어보시면 아시겠지만 스마트폰으로 vtrust-flash Wifi에 접속 합니다.&lt;br /&gt;
&lt;br /&gt;
그리고 WiFi 접속 후 Connect 페이지 까지 폰에서 확인 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126822669-76e1b8dd-c5e5-47cc-b1ce-508b6a7fd402.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 뒤, 하트모양 IR을 전원 연결 하고 리셋버튼(버튼이 하나밖에 없어요^^)를 
&lt;br /&gt;
5~6초간 누른 뒤 녹색 LED가 깜빡 깜빡 할때까지 기다립니다. 
&lt;br /&gt;
깜빡 거리기 시작하면 ENTER를 눌러주세요!&lt;/p&gt;

&lt;p&gt;그럼 아래와같이 Scan을 시작합니다.. 
저는 바로 찾아서 Firmware backup을 진행하던데, 안되면 여러번 시도해야 한다고 합니다.&lt;/p&gt;

&lt;p&gt;기존 펌웨어 백업 중..
(백업된 펌웨어는 tuya_convert/backups에 저장됩니다. 하지만 전 쓸 일이 없을 것 같습니다.ㅎㅎ)
&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126812043-25cc2a1e-4323-410f-bb5f-6918c92ca337.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;백업이 완료되면 flash 옵션이 나옵니다. &lt;br /&gt;
2) flash tasmota.bin 선택해야 하니 2 누르고 Enter 그리고 y 를 입력 주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126812076-846a11b1-d160-4e1d-93dc-393f3a7f7d1d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;플래시가 끝나면 아래와 같이 나옵니다.  &lt;br /&gt;
tasmota-XXXX 를 연결해서 남은 설정을 하라고 하네요.
다른 기기도 flash할거니? 묻는 화면엔 n 을 누르고 빠져 나옵니다.&lt;/p&gt;

&lt;p&gt;이제 라즈베리파이or리눅스 컴퓨터로 하는 작업은 모두 끝났습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126812131-b28a1869-846f-4a3e-9472-534cf9729812.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 다시 휴대폰으로 Wifi를 검색해 봅니다. &lt;br /&gt;
tasmota-XXXXX 를 찾아서 연결한 뒤, AP1 SSID() 항목에 와이파이 이름이랑 비밀번호를 입력합니다.  &lt;br /&gt;
그리고 Save 눌러주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126822847-014f8aae-6a40-40db-8f51-011d6e475ecb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 하트IR기기가 해당 와이파이로 접속을 할 겁니다.. &lt;br /&gt;
이제 본인 집의 공유기 설정으로 가서 tasmota-XXXXXXX 로 연결되어있는 기기가 있는지 확인 합니다. &lt;br /&gt;
아래 화면은 공유기마다 설정이 달라서.. 무선 공유기 설정화면에서 찾아보셔야 합니다! &lt;br /&gt;
그리고 화면에 나온 ip를 같은 네트워크에 연결된 컴퓨터 브라우저로 접속 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126808483-045fff82-0dfa-49bf-abcc-7cfc3d37d07b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;짠~ Tamosta 바이너리가 하트IR에 올라갔습니다. &lt;br /&gt;
Tasmota로 둔갑한 하트IR에서 보여주는 화면 입니다. &lt;br /&gt;
이제 이걸 다시 앞 포스팅에서 만든 ESPHome binary로 교체해야 합니다. &lt;br /&gt;
Firmware Upgrade 메뉴로 들어가 주세요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126808564-25df1288-2fa1-4d5b-a45f-2de8249e90d2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래 Upgrade by file upload로 펌웨어 변경을 할 예정입니다. &lt;br /&gt;
앞 포스팅에서 만든 Binary 파일을 선택 후 Start Upgrade 를 눌러주세요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126808790-10b1d73c-938b-4b21-9e86-2e9ae1e14b5c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자 이제 정상적으로 업로드가 완료 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126808825-32530a2e-8705-4024-8a9e-6b413f9e5c13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 ESPHome 대쉬보드로 돌아가보면, 아까 만든 설정이 ONLINE 으로 바뀐 걸 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126808931-e6496a34-5f34-4e0c-9643-00b6429f3ead.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후에 EDIT로 YAML 파일 설정 하단에 아래 라인을 넣은 뒤 INSTALL - Wireless 하고 기다리면, &lt;br /&gt;
하트IR이 불이 켜지고 하트IR에 리모컨을 향하고 버튼을 눌러 보시면 LOG에서 관련 정보가 뜰겁니다! &lt;br /&gt;
이제 이 값들로 잘 설정을..ㅎ&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;esphome:
  name: livingroom
  platform: ESP8266
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: &quot;5e191a0ed751137a3b274c51eddd8a76&quot;

wifi:
  ssid: &quot;xxxxx&quot;
  password: &quot;xxxxxxxxx&quot;

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: &quot;Livingroom Fallback Hotspot&quot;
    password: &quot;MsA2r2Le1i2r&quot;

captive_portal:

# 여기서부터 아래에 추가해주세요^^
web_server:
  port: 80
  
status_led:
  pin: GPIO4

sensor:
  - platform: uptime
    name: &quot;IR Uptime&quot;

  - platform: wifi_signal
    name: &quot;IR WiFi signal&quot;
    update_interval: 60s

binary_sensor:
  - platform: status
    name: &quot;IR Status&quot;

  - platform: gpio
    pin: GPIO13
    id: physical_button

text_sensor:
  - platform: version
    name: &quot;IR ESPHome version&quot;

remote_transmitter:
  pin:
    number: GPIO14
  carrier_duty_percent: 50%

remote_receiver:
  pin: GPIO5
  dump: all

switch:
  - platform: template
    name: Turn on TV
    turn_on_action:
      - remote_transmitter.transmit_sony:
          data: 0x00000750
          repeat:
            times: 5
            wait_time: 45ms
    id: tv_on
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126859982-7fd006a1-380a-4760-a953-f8ed13c0cd99.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126859977-5446f8ab-c442-419f-954b-6b0efc6abcce.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126859979-77c37ef7-3ab0-47d3-ab6a-37024a1f869a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Jul 2021 22:35:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/iot-hear_ir-esphome_2/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/iot-hear_ir-esphome_2/</guid>
        
        <category>HomeIoT</category>
        
        <category>하트IR</category>
        
        <category>HomeAssistant</category>
        
        <category>ESPHome</category>
        
        <category>tuya-convert</category>
        
        
        <category>Dev</category>
        
        <category>Home IoT</category>
        
      </item>
    
      <item>
        <title>[HomeAssistant] 하트IR ESPHOME 펌웨어로 변경, HA연동하기(1)</title>
        <description>&lt;h3 id=&quot;개요&quot;&gt;개요&lt;/h3&gt;

&lt;p&gt;저는 집에 있는 헤놀로지 NAS를 이용하여 Docker에 Home Assistant 를 운영 중 입니다.&lt;/p&gt;

&lt;p&gt;집에 있는 에어컨에 와이파이 모듈이 없어서, 아래와 같이 생긴 하트 모양의&lt;/p&gt;

&lt;p&gt;IR 기기를(Timethinker Tuya IR Controller)&lt;/p&gt;

&lt;p&gt;사용해서 거실에 둔 다음, 가정에서 사용하는 대부분의 리모컨 버튼을&lt;/p&gt;

&lt;p&gt;입력하여 자유자재로 원격으로 조종하고자 하는게 목표 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126789866-667e2ac7-adfc-445f-a2a4-854ffc4b7a62.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제품에 보면 Google Assistant, amazon alexa 등을 지원해서 그냥 써도 될 것 같지만,&lt;/p&gt;

&lt;p&gt;많은 사람들이 저런 클라우드 서버를 통하지 않고 빠른 동작 처리를 위해 로컬에서 사용하기 위해서&lt;/p&gt;

&lt;p&gt;펌웨어를 업데이트 하여 Home Assistant 내 ESPHOME 으로 기기를 연동 합니다.&lt;/p&gt;

&lt;p&gt;내용이 길어서 3부작으로 작성하려고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Home Assistant 내 ESPHOME 에서 Firmware Image (Bin) 만들기 (본 페이지)&lt;/li&gt;
  &lt;li&gt;라즈베리파이를 이용해서 업데이트 서버로 위장, 하트IR 펌웨어 변경하기&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;준비물&quot;&gt;준비물&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;라즈베리파이 3
    &lt;ul&gt;
      &lt;li&gt;라즈베리파이가 아니더라도 리눅스가 돌아가는 Wifi 달린 컴퓨터.&lt;/li&gt;
      &lt;li&gt;vmware로도 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;하트 IR&lt;/li&gt;
  &lt;li&gt;ESPHome 설치가 가능한 Home Assistant 환경&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;esphome-설치&quot;&gt;ESPHome 설치&lt;/h3&gt;

&lt;p&gt;먼저 ESPHome이 설치가 안되어 있으신 분들은,&lt;/p&gt;

&lt;p&gt;Home Assistant 의 Supervisor - 애드온 스토어에서 - ESPHome 검색 후 다운로드 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126802185-6f84729c-b804-4445-b65e-4bf8f0ddc21a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 후 실행한 다음, 웹 UI 열기 를 눌러서 ESPHOME 대쉬보드로 들어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126802292-2883e221-8a75-4efb-8a61-235b6a974c80.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;esphome-기기-등록&quot;&gt;ESPHome 기기 등록&lt;/h3&gt;

&lt;p&gt;대쉬보드에서 + 버튼을 눌러서 설정을 추가 해 줄 것인데요, 저는 거실에서 쓸 것이므로 livingroom 으로 지었습니다.
WI-FI SSID하고 비밀번호는 집 WIFI, PASSWORD를 넣어주세요!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126802391-75317607-30ba-4a94-b5cb-a391a3cbef76.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ESP Device는 ESP8266을 선택하고 NETX를 눌러 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126802433-c08eae45-ca9c-4bb3-8640-0f92a036981d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그럼 설정이 하나 추가 되었는데요, 여기서 ISNTALL 을 누르고, Manual Download를 눌러서 바이너리 파일을 빌드 합니다.
다 끝나면 bin 파일이 하나 저장되는데 이걸 컴퓨터에 저장해 놓습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126804605-8fb0a65d-5a0a-49f9-93a4-37fc653cfbe1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126804647-e95e98b6-b579-4136-a310-2a82c444c7c5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/9496842/126804697-c778c9fe-30b3-4570-a87d-9925140a2ff9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;여기까지 Firmware Image (Bin) 파일 만들기였습니다.
다음 포스팅에서는 tuya-convert 라는 해킹(?) 툴을 이용해서 tasmota라는 바이너리를 올리고, 
tasmota 바이너리 내에 위치한 firmware update기능으로 이 바이너리를 최종적으로 하트 IR 에 플래시 할 예정입니다.&lt;/p&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Jul 2021 22:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/iot-hear_ir-esphome/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/iot-hear_ir-esphome/</guid>
        
        <category>HomeIoT</category>
        
        <category>하트IR</category>
        
        <category>HomeAssistant</category>
        
        <category>ESPHome</category>
        
        <category>tuya-convert</category>
        
        
        <category>Dev</category>
        
        <category>Home IoT</category>
        
      </item>
    
      <item>
        <title>[VSCode] VSCode에서 파일/소스 비교하기(Source Compare)</title>
        <description>&lt;p&gt;VSCode 에서 간단 파일 비교를 위한 팁 입니다.
먼저 Compare 창 진입은 VSCode 내에 command로 하는데, 방법은 아래와 단축키로 Show all command 창에서 명령을 내립니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[Windows] Ctrl + Shift + p&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[Mac]  Command + Shift + P or F1 (with fn key)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 단축키를 누르면 상단에 command 입력창이 뜨는데, 요기에 compare 만 치시면 아래와 같이 3개 명령이 나옵니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/125379024-bd137500-e3ca-11eb-8b00-1701c054493d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그리고 각 편한 방법대로 비교하시면 됩니다!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Compare Active File With.. (현재 열려 있는 파일과, 다른 파일간에 비교하기)
다른 파일을 선택하면 이렇게 파일 비교를 해 준다.
&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/125445955-10fca98e-6050-43dc-ba54-a3e7d1505ec2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compare Active File with Clipboard. (현재 열려있는 창과, 클립보드 내용과 비교하기)
현재 Clipboard 에 복사되어있는 코드랑 비교할때 사용.
&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/125446032-08813f90-f1f3-4eea-98cd-2ed23d3d86e5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Compare Active File with saved. 현재 수정된 코드와 저장전 코드와 비교하기
작업중인 문서가 저장하기 전 이라면, 저장 전과 현재 코드를 비교 해줌.
&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/125446097-f458f737-71a6-4870-bda0-fb4c07dd9a21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이상입니다!&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Jul 2021 17:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/vscode_compare/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/vscode_compare/</guid>
        
        <category>VSCode</category>
        
        <category>Compare</category>
        
        <category>소스비교</category>
        
        <category>파일비교</category>
        
        
        <category>Dev</category>
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>[Docker] Docker로 OpenGrok 설치해서 소스분석을 쉽게하기</title>
        <description>&lt;p&gt;Docker는 설치 되어 있다는 가정하에 기고 합니다.
사실 직접 설치를 하려고 했으나 관리주체가 oracle로 바뀌면서 정보도 별로 없고 공식 가이드 참고해서 해도 잘 안되어서 Docker로 진행&lt;/p&gt;

&lt;p&gt;Docker Hub 주소 : &lt;a href=&quot;https://hub.docker.com/r/opengrok/docker/&quot; target=&quot;_blank&quot;&gt;https://hub.docker.com/r/opengrok/docker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;인증이 필요하거나, 큰 사이즈의 프로젝트이거나 하면 사용 하기엔 적합하지 않다. (그럴땐 서버에 다이렉트로 OpenGrok 설치)
Opengrok 도커 이미지에는 Tomcat 도 내장되어있어 간편하게 설정 후 웹으로 바로 접속이 가능하다!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker 설치
    &lt;blockquote&gt;
      &lt;p&gt;docker pull opengrok/docker&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker 실행
    &lt;blockquote&gt;
      &lt;p&gt;docker run -d -v &amp;lt;/나의/소스/경로/&amp;gt;:/opengrok/src -p 8080:8080 opengrok/docker:latest&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;주의사항 : 소스경로는 실제 소스파일들이 있는, 최대한 깊은 경로로 지정해 주셔야 합니다! (한단계 위로 하니 Indexing이 안되더라구요.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/125232228-22a62980-e317-11eb-9bca-0810d717de0b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이후 &lt;a href=&quot;http://localhost:8080/&quot; target=&quot;_blank&quot;&gt;http://localhost:8080/&lt;/a&gt; 접속!!
처음 접속하면 indexing 중으로 새로고침하다보면 각 폴더들이 차례대로 추가되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;매우 잘 나온다…&lt;/p&gt;

&lt;p&gt;혹시 서버 등에 모든포트 열려있으면 외부에서도 접속 가능할 것 같으니 조심하자.&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Jul 2021 17:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/opengrok_in_macOS/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/opengrok_in_macOS/</guid>
        
        <category>OpenGrok</category>
        
        <category>소스분석툴</category>
        
        
        <category>Dev</category>
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>[AWS] EC2/기타 Terminal에서 AccessDeniedException 에러 해결하기(MFA)</title>
        <description>&lt;p&gt;웹 콘솔에서는 잘 되는데, Terminal 에서 각종 AWS 리소스에 접근 하려고 하면 본 포스팅을 주의깊게 봐주세요!&lt;/p&gt;

&lt;p&gt;그리고 본인 계정이 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/id_credentials_mfa_enable_virtual.html&quot; target=&quot;_blank&quot;&gt;MFA(Multi-Factor Authentication)&lt;/a&gt;를 통한 OTP 인증을 안하고 있으면 지나가 주셔도 좋습니다.&lt;/p&gt;

&lt;p&gt;본 포스팅은 Terminal 에서 MFA 인증 필요한 상황에서 AccessDeniedException 을 해결하기 위한 포스팅 입니다!&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;botocore.exceptions.ClientError: An error occurred (AccessDeniedException)
when calling the GetItem operation: User: arn:aws:iam::xxxxxxxx
is not authorized to perform: dynamodb:GetItem on resource:
arn:aws:dxxxxxxxxxx:table/xxxxxxxxx with an explicit deny
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 에러는 Explicit Deny. 즉 명싱적으로 거부하는 권한(Policy)이 있다는 뜻 입니다.&lt;/p&gt;

&lt;p&gt;저같은 경우는 아래와 같은 Deny 룰이 그룹권한에 포함 되어 있었습니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;DenyAllExceptListedIfNoMFA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;NotAction&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:CreateVirtualMFADevice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:EnableMFADevice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:GetUser&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:ListMFADevices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:ListVirtualMFADevices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:ResyncMFADevice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:ChangePassword&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:GetAccountPasswordPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:GetSessionToken&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;BoolIfExists&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;aws:MultiFactorAuthPresent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Web console에서는 MFA로 접속하기 때문에 정상적으로 다 접근이 가능하지만, Terminal에서는 MFA인증이 안되어 AccessDeniedException이 발생하는 거였습니다!&lt;/p&gt;

&lt;p&gt;Terminal에서도 MFA인증과정이 필요 합니다.
먼저 내 MFA 디바이스 SerialNumber를 아래 명령어로 찾고,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;aws iam list-virtual-mfa-devices&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;본인 계정에 나오는 “SerialNumber” 값을 기록 해 둔 다음,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/124892036-76153080-e014-11eb-9dcc-512dd0838a00.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아래 명령어로 access key id, secret access key, session token을 구합니다. (Expiration 시간까지 세션 유지 됨.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;aws sts get-session-token –serial-number &amp;lt;SERIAL_NUMBER&amp;gt; –token-code XXXXXX (XXXXX는 Authy등 OTP 번호)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/124892462-de641200-e014-11eb-8816-87b84abd3518.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 환경변수 AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN 를 설정 해 주면 정상적으로 됩니다!!!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MAC/Linux
    &lt;blockquote&gt;
      &lt;p&gt;export AWS_ACCESS_KEY_ID=”ASIA5EN2LGZPLPEO7J2U”&lt;br /&gt;
export AWS_SECRET_ACCESS_KEY=”rMil+kXhPfHwdyjpjb1tRhst0l59Mejc7idYkoQR”&lt;br /&gt;
export AWS_SESSION_TOKEN=”IQoJb3JpZ2luX2VjEPD//////////wEaCXVzLWVhc3QtMiJHMEUCI…. snip… “&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows
    &lt;blockquote&gt;
      &lt;p&gt;setx AWS_ACCESS_KEY_ID ASIA5EN2LGZPLPEO7J2U&lt;br /&gt;
setx AWS_SECRET_ACCESS_KEY rMil+kXhPfHwdyjpjb1tRhst0l59Mejc7idYkoQR&lt;br /&gt;
setx AWS_DEFAULT_REGION “IQoJb3JpZ2luX2VjEPD//////////wEaCXVzLWVhc3QtMiJHMEUCI…. snip… “&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다시 해제하고 하려면 unset 으로 각 환경변수를 해제한 뒤 다시 시도하세요 :)&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Jul 2021 17:30:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/aws_mfa_access_by_terminal/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/aws_mfa_access_by_terminal/</guid>
        
        <category>알고리즘</category>
        
        <category>DFS</category>
        
        <category>DFS알고리즘</category>
        
        <category>코딩테스트</category>
        
        
        <category>Dev</category>
        
        <category>AWS</category>
        
      </item>
    
      <item>
        <title>프림(Prim) 알고리즘(기본 예제)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.fun-coding.org/Chapter20-prim-live.html&quot; target=&quot;_blank&quot;&gt;기초 강의 바로가기&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;heapq&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'G'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'G'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;prim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;adj_edges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;adj_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;adj_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;connected_nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;candidate_edge_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adj_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heapify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_edge_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;candidate_edge_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heappop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_edge_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connected_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;connected_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adj_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connected_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;heappush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;candidate_edge_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mst&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 08 Jul 2021 14:10:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/prim_algo/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/prim_algo/</guid>
        
        <category>알고리즘</category>
        
        <category>Prim</category>
        
        <category>프림</category>
        
        <category>프림알고리즘</category>
        
        <category>코딩테스트</category>
        
        
        <category>Algorithm</category>
        
        <category>Coding Test</category>
        
      </item>
    
      <item>
        <title>DFS 알고리즘(기본 예제)</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/124865634-fb3d1d00-dff5-11eb-86d5-18f7de34adc4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discovered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;discovered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discovered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;discovered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discovered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discovered&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 08 Jul 2021 14:05:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/dfs_algo/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/dfs_algo/</guid>
        
        <category>알고리즘</category>
        
        <category>DFS</category>
        
        <category>DFS알고리즘</category>
        
        <category>코딩테스트</category>
        
        
        <category>Algorithm</category>
        
        <category>Coding Test</category>
        
      </item>
    
      <item>
        <title>다익스트라 알고리즘(기본 예제)</title>
        <description>&lt;p&gt;&lt;img src=&quot;http://user-images.githubusercontent.com/9496842/124858223-9dee9f00-dfe8-11eb-8aa9-52f7ba008583.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;시작점 A에서 각 노드별 최소거리 구하는 방법&lt;/p&gt;

&lt;p&gt;결과:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;{‘A’: 0, ‘B’: 6, ‘C’: 1, ‘D’: 2, ‘E’: 5, ‘F’: 6}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;heapq&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'C'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'B'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'D'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'F'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# start에 'A'가 들어감.ㅎ
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dij&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# distance array 생성
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'inf'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;distances : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 시작노드-시작노드 거리는 0 !
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# heapq 이용해서 p-queue 생성. queue에는 아래와 같이 들어가 있음. {숫자:노드이름}
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# p-queue 에서 가장 작은 거리부터 하나씩 꺼낸다. ㅎ
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;cur_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#만약,, distnace 에 저장된 애보다 크면 continue.ㅋ
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;#이제 현재 노드 기준으로 for 순회
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# cur_node에서 이 노드까지의 거리(가중치) 계산
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur_distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;distance : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 만약.. 현재 노드의 거리보다 새로 계산된 거리가 더 짧을 경우.
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# 현재 노드의 거리에 업뎃 하고
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# ★중요★ 그런 경우에는 추가 확인이 필요하므로 해당노드와 거리를 p-queue에 넣어줌.
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;heapq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heappush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distances&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dij&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 08 Jul 2021 13:57:00 +0900</pubDate>
        <link>https://kkangz.github.io/posts/dij_algo/</link>
        <guid isPermaLink="true">https://kkangz.github.io/posts/dij_algo/</guid>
        
        <category>알고리즘</category>
        
        <category>다익스트라</category>
        
        <category>코딩테스트</category>
        
        
        <category>Algorithm</category>
        
        <category>Coding Test</category>
        
      </item>
    
  </channel>
</rss>
